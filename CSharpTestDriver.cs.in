class MummyCSharpTestDriver
{
   public static void Main(string[] args)
   {
      try
      {
         string test;

         if (0 == args.Length)
         {
            test = GetTestNameInteractively();
         }
         else
         {
            test = args[0];
         }

         System.Type t = System.Type.GetType(test + "Class");
         if (null == t)
         {
            throw new System.ArgumentException(System.String.Format(
               "error: could not create a Type object for '{0}'...\n\n{1}\n{2}\n{3}\n{4}\n\n{5}\n\n",
               test + "Class",
               "Typo?",
               "Did you follow the C# test driver naming convention?",
               "Did you add the test to the CMakeLists.txt file?",
               "Did you reconfigure/rebuild after adding the test?",
               "Test 'method' name should equal 'file name without extension'... Test 'public class' name should be the same but with 'Class' appended..."
               ));
         }

         System.Reflection.MethodInfo mi = t.GetMethod(test);
         if (null == mi)
         {
            throw new System.ArgumentException(System.String.Format(
               "error: could not find method named '{0}'", test));
         }

         // Expected method signature is "same as C# Main": returns void
         // and takes a string array as its one argument...
         //
         object[] invArgs = new object[1];
         invArgs[0] = args;
         mi.Invoke(null, invArgs);

         // Before forced garbage collection, make sure the mummy Runtime
         // is not holding onto any wrapper objects anymore:
         //
         Kitware.mummy.Runtime.Methods.ForceRemoveCallbacks();
         Kitware.mummy.Runtime.Methods.ForceClearWrappedObjectsTable();

         // Force a garbage collection prior to exiting the test
         // so that any memory leaks reported are likely to be
         // *actual* leaks of some sort rather than false reports:
         //
         System.GC.Collect();
         System.GC.WaitForPendingFinalizers();

         // Test finished without throwing any exceptions...
         // Therefore, it passed. Exit with a zero ExitCode.
         //
         System.Environment.ExitCode = 0;
      }
      catch(System.Exception exc)
      {
         // Catch anything, spit it out to the console so it can be captured
         // by ctest. Exit with a non-zero ExitCode.
         //
		 System.Console.Error.WriteLine("================================================================================");
		 System.Console.Error.WriteLine("");
		 System.Console.Error.WriteLine("Mummy C# test driver caught System.Exception:");
		 System.Console.Error.WriteLine("");
         System.Console.Error.WriteLine("{0}", exc.ToString());
		 System.Console.Error.WriteLine("");
		 System.Console.Error.WriteLine("================================================================================");
		 System.Console.Error.WriteLine("");
         System.Environment.ExitCode = 2345;
      }
   }

   public static string[] GetAvailableTests()
   {
      System.Collections.ArrayList testList = new System.Collections.ArrayList();
      System.Reflection.Assembly assy = System.Reflection.Assembly.GetExecutingAssembly();

      foreach (System.Type et in assy.GetExportedTypes())
      {
         if (et.IsClass)
         {
            foreach (System.Reflection.MethodInfo mInfo in et.GetMethods())
            {
               if (et.Name == mInfo.Name + "Class")
               {
                  testList.Add(mInfo.Name);
               }
            }
         }
      }

      return (string[])testList.ToArray(System.Type.GetType("System.String"));
   }

   public static string GetTestNameInteractively()
   {
      string s = "Available tests:\n";

      string[] tests = GetAvailableTests();

      int i = 0;
      foreach (string xyz in tests)
      {
         s = System.String.Format("{0}  {1}: {2}\n", s, i, xyz);
         ++i;
      }

      s = System.String.Format("{0}To run a test, enter the test number: ", s);

      System.Console.Write(s);

      string choice = System.Console.ReadLine();

      int choiceNumber = -1;
      try
      {
         choiceNumber = System.Convert.ToInt32(choice);

         if (choiceNumber < 0 || choiceNumber >= tests.Length)
         {
            throw new System.ArgumentOutOfRangeException(System.String.Format(
               "'{0}' is an invalid test number.\nExiting without running a test.\n\n",
               choice));
         }
      }
      catch (System.Exception)
      {
         System.Console.Error.Write(System.String.Format(
            "'{0}' is an invalid test number.\nExiting without running a test.\n\n",
            choice));

         throw;
      }

      return tests[choiceNumber];
   }
}
